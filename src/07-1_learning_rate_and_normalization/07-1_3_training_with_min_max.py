"""
 Created by IntelliJ IDEA.
 Project: Deep-Learning-for-Everybody
 ===========================================
 User: ByeongGil Jung
 Date: 2019-01-25
 Time: 오후 11:52
"""

import tensorflow as tf
import numpy as np


def min_max_scaler(data):
    numerator = data - np.min(data, 0)
    denominator = np.max(data, 0) - np.min(data, 0)
    # noise term prevents the zero division
    return numerator / (denominator + 1e-7)


tf.set_random_seed(777)

# Data
xy = np.array([[828.659973, 833.450012, 908100, 828.349976, 831.659973],
               [823.02002, 828.070007, 1828100, 821.655029, 828.070007],
               [819.929993, 824.400024, 1438100, 818.97998, 824.159973],
               [816, 820.958984, 1008100, 815.48999, 819.23999],
               [819.359985, 823, 1188100, 818.469971, 818.97998],
               [819, 823, 1198100, 816, 820.450012],
               [811.700012, 815.25, 1098100, 809.780029, 813.669983],
               [809.51001, 816.659973, 1398100, 804.539978, 809.559998]])

# Normalization
xy = min_max_scaler(xy)
print(xy)
"""
[[0.99999999 0.99999999 0.         1.         1.        ]
 [0.70548491 0.70439552 1.         0.71881782 0.83755791]
 [0.54412549 0.50274824 0.57608696 0.606468   0.6606331 ]
 [0.33890353 0.31368023 0.10869565 0.45989134 0.43800918]
 [0.51436    0.42582389 0.30434783 0.58504805 0.42624401]
 [0.49556179 0.42582389 0.31521739 0.48131134 0.49276137]
 [0.11436064 0.         0.20652174 0.22007776 0.18597238]
 [0.         0.07747099 0.5326087  0.         0.        ]]
"""

x_data = xy[:, 0:-1]
y_data = xy[:, [-1]]

# Params
nb_classes = 1
lr = 1e-5

X = tf.placeholder(tf.float32, shape=[None, 4])
Y = tf.placeholder(tf.float32, shape=[None, 1])

W = tf.Variable(tf.random_normal([4, nb_classes]), name="weight")
b = tf.Variable(tf.random_normal([nb_classes]), name="bias")

# Making model
hypothesis = tf.matmul(X, W) + b

cost = tf.reduce_mean(tf.square(hypothesis - Y))
optimizer = tf.train.GradientDescentOptimizer(learning_rate=lr).minimize(cost)

# Launch
with tf.Session() as sess:
    sess.run(tf.global_variables_initializer())

    print("step | cost | pred")
    for step in range(101):
        cost_val, hy_val, _ = sess.run(fetches=[cost, hypothesis, optimizer], feed_dict={X: x_data, Y: y_data})
        print(step, cost_val, hy_val)

"""
step | cost | pred
0 0.15230925 [[ 1.6346191 ]
 [ 0.06613699]
 [ 0.35008186]
 [ 0.6707252 ]
 [ 0.6113075 ]
 [ 0.61464405]
 [ 0.23171967]
 [-0.1372836 ]]
1 0.15230872 [[ 1.634618  ]
 [ 0.06613842]
 [ 0.35008252]
 [ 0.670725  ]
 [ 0.6113076 ]
 [ 0.6146442 ]
 [ 0.23171999]
 [-0.13728246]]
2 0.15230817 [[ 1.6346169 ]
 [ 0.06613985]
 [ 0.35008317]
 [ 0.67072475]
 [ 0.61130774]
 [ 0.6146444 ]
 [ 0.23172033]
 [-0.13728121]]
3 0.1523076 [[ 1.6346157 ]
 [ 0.06614128]
 [ 0.35008383]
 [ 0.67072463]
 [ 0.6113078 ]
 [ 0.6146445 ]
 [ 0.23172063]
 [-0.13728008]]
4 0.15230706 [[ 1.6346145 ]
 [ 0.06614271]
 [ 0.35008448]
 [ 0.67072445]
 [ 0.61130786]
 [ 0.61464477]
 [ 0.23172095]
 [-0.13727888]]

...

97 0.15225571 [[ 1.6345065 ]
 [ 0.06627658]
 [ 0.35014558]
 [ 0.6707064 ]
 [ 0.6113159 ]
 [ 0.6146601 ]
 [ 0.2317509 ]
 [-0.13716885]]
98 0.15225515 [[ 1.6345053 ]
 [ 0.06627801]
 [ 0.35014623]
 [ 0.67070615]
 [ 0.61131597]
 [ 0.61466026]
 [ 0.2317512 ]
 [-0.1371676 ]]
99 0.15225461 [[ 1.6345041 ]
 [ 0.06627944]
 [ 0.35014686]
 [ 0.670706  ]
 [ 0.6113161 ]
 [ 0.61466044]
 [ 0.23175152]
 [-0.13716647]]
100 0.15225405 [[ 1.6345029 ]
 [ 0.06628087]
 [ 0.35014752]
 [ 0.67070574]
 [ 0.6113161 ]
 [ 0.6146606 ]
 [ 0.23175186]
 [-0.13716528]]
"""
